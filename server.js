import { createServer } from 'http'; //Module HTTP de Node.js, permet de crÃ©er un serveur HTTP
import app from './app.js'; // Importe l'application Express dÃ©finie dans app.js

const port = process.env.PORT || 3000; //RÃ©cupÃ©ration du port dÃ©fini par l'environnement, 3000 par dÃ©faut

// On s'assure que le port est bien un nombre entier positif
const normalizePort = val => {
    const port = parseInt(val, 10);
  
    if (isNaN(port)) {
      return val; // Retourne un port sous forme de chaÃ®ne de caractÃ¨res si ce n'est pas un nombre
    }
    if (port >= 0) {
      return port; // Retourne le port si il est supÃ©rieur ou Ã©gal Ã  0
    }
    return false;
};

app.set('port', normalizePort(port)); // Stocke la valeur du port dans Express pour la rÃ©cupÃ©rer plus tard avec app.get('port')

// Gestion des erreurs possibles lors du lancement du serveur
const errorHandler = error => {
  if (error.syscall !== 'listen') {
    throw error;
  }
  
  const port = app.get('port');
  const bind = typeof port === 'string' ? 'pipe ' + port : 'port ' + port;

  switch (error.code) {
    case 'EACCES': //AccÃ¨s refusÃ©
      console.error(`${bind} requires elevated privileges.`);
      process.exit(1);
      break;
    case 'EADDRINUSE': //Port dÃ©jÃ  utilisÃ©
      console.error(`${bind} is already in use.`);
      process.exit(1);
      break;
    default:
      throw error;
  }
};

// CrÃ©ation du serveur HTTP avec Express comme gestionnaire de requÃªtes
const server = createServer(app);

// Lorsque le serveur rencontre une erreur, il appelle errorHandler pour la traiter
server.on('error', errorHandler);

// Une fois le serveur lancÃ©, on affiche l'adresse et le port d'Ã©coute
server.on('listening', () => {
  const address = server.address();  // Adresse et port du serveur
  const bind = typeof address === 'string' ? 'pipe ' + address : 'port ' + address.port;
  console.log(`Listening on ${bind}`); // Affiche le port d'Ã©coute
});

// DÃ©marre le serveur
server.listen(app.get('port')); // Utilise app.get pour rÃ©cupÃ©rer le port


// Pourquoi utiliser http.createServer() alors qu'Express peut dÃ©marrer tout seul ?

// Avec http.createServer(app), tu as plus de flexibilitÃ©, comme :

// Support des WebSockets (ex: socket.io).
// GÃ©rer plusieurs types de connexions (HTTP et HTTPS en mÃªme temps).
// Ajout de middlewares natifs de http.

// Dans un projet simple, tu pourrais directement faire :

// app.listen(3000, () => console.log('Serveur dÃ©marrÃ© sur le port 3000'));

// Mais avec createServer(), tu es prÃªt pour des applications plus complexes ! ğŸš€


// Ce code server.js est rÃ©utilisable Ã  95%, avec quelques ajustements

// Ce server.js peut Ãªtre utilisÃ© pour chaque projet avec :

//     Un fichier .env pour Ã©viter de toucher au code.
//     Un port configurable.
//     Une option pour HTTPS.
//     Un meilleur systÃ¨me de logs.

// Tu peux donc le copier-coller dans un nouveau projet et ne modifier que les dÃ©tails dans .env et app.js ! ğŸš€
